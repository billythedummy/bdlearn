#ifndef libbatchmatmulabr_SCHEDULE_H
#define libbatchmatmulabr_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by src/AutoSchedule
// for target=x86-64-linux-avx-avx2-f16c-fma-sse41  // NOLINT
// with machine_params=32,16777216,40

#include "Halide.h"


inline void apply_schedule_libbatchmatmulabr(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Var n_vi("n_vi");
    Var n_vo("n_vo");

    Func batch_matmul = pipeline.get_func(2);
    Func out = pipeline.get_func(3);

    {
        Var n = batch_matmul.args()[2];
        batch_matmul
            .compute_root()
            .split(n, n_vo, n_vi, 8)
            .vectorize(n_vi)
            .parallel(n_vo);
        batch_matmul.update(0)
            .split(n, n_vo, n_vi, 8, TailStrategy::GuardWithIf)
            .vectorize(n_vi)
            .parallel(n_vo);
    }
    {
        Var n = out.args()[2];
        out
            .compute_root()
            .split(n, n_vo, n_vi, 8)
            .vectorize(n_vi)
            .parallel(n_vo);
    }


}

#endif  // libbatchmatmulabr_SCHEDULE_H
